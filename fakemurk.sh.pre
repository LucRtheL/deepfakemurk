traps() {
    set -e
    trap 'last_command=$current_command; current_command=$BASH_COMMAND' DEBUG
    trap 'echo "\"${last_command}\" command failed with exit code $?. THIS IS A BUG, REPORT IT HERE https://github.com/MercuryWorkshop/fakemurk"' EXIT
}

swallow_stdin() {
    while read -t 0 notused; do
        read input
    done
}
fakemurk_info() {
    ascii_info
    sleep 3
    cat <<-EOF

WARNING: THIS SCRIPT WILL REQUIRE THE REMOVAL OF ROOTFS VERIFICATION, AND THE DISABLING OF AUTOUPDATES
THIS MEANS THAT IF YOU EVER TURN OFF DEVMODE, YOUR SYSTEM WILL BE BRICKED UNTIL RECOVERY

WE ARE NOT RESPONSIBLE FOR DAMAGE, YOU BEING STUPID AND MISUSING THIS, OR GETTING IN TROUBLE
DO YOU UNDERSTAND??

(enter to proceed, ctrl+c to quit)
EOF
    swallow_stdin
    read
}

csys() {
    if test -f "/usr/bin/crossystem.old"; then
        $ROOT/usr/bin/crossystem.old "$@"
    else
        $ROOT/usr/bin/crossystem "$@"
    fi
}
cvpd() {
    if test -f "/usr/sbin/vpd.old"; then
        $ROOT/usr/sbin/vpd.old "$@"
    else
        $ROOT/usr/sbin/vpd "$@"
    fi
}

raw_crossystem_sh() {
    base64 -d <<-EOF | bunzip2 -dc
#include "crossystem.sh.b64"
EOF
}

sed_escape() {
    echo -n "$1" | while read -n1 ch; do
        if [[ "$ch" == "" ]]; then
            echo -n "\n"
        fi
        echo -n \\x$(printf %x \'"$ch")
    done
}
drop_crossystem_sh() {
    vals=$(sed "s/ /THIS_IS_A_SPACE_DUMBASS/g" <<<$(crossystem_values))
    raw_crossystem_sh | sed -e "s/#__SED_REPLACEME_CROSSYSTEM_VALUES#/$(sed_escape "$vals")/g" | sed -e "s/THIS_IS_A_SPACE_DUMBASS/ /g" >$ROOT/usr/bin/crossystem
    chmod 777 $ROOT/usr/bin/crossystem
}

escape() {
    case $1 in
    '' | *[!0-9]*) printf "\"$1\"" ;;
    *) printf $1 ;;
    esac
}

crossystem_values() {
    readarray -t csys_lines <<<"$(csys)"
    for element in "${csys_lines[@]}"; do
        line_stripped=$(echo "$element" | sed -e "s/#.*//g" | sed -e 's/ .*=/=/g')
        # sed 1: cuts out all chars after the #
        # sed 2: cuts out all spaces before =
        IFS='=' read -r -a pair <<<"$line_stripped"

        key=$(echo ${pair[0]})
        # cut out all characters after an instance of 2 spaces in a row
        val="$(echo ${pair[1]} | sed -e 's/  .*//g')"
        if [ "$key" == "devsw_cur" ]; then
            val=0
        fi
        if [ "$key" == "devsw_boot" ]; then
            val=0
        fi
        if [ "$key" == "mainfw_type" ]; then
            val="normal"
        fi
        if [ "$key" == "mainfw_act" ]; then
            val="A"
        fi
        if [ "$key" == "cros_debug" ]; then
            val=0
        fi
        if [ "$key" == "dev_boot_legacy" ]; then
            val=0
        fi
        if [ "$key" == "dev_boot_signed_only" ]; then
            val=0
        fi
        if [ "$key" == "dev_boot_usb" ]; then
            val=0
        fi
        if [ "$key" == "dev_default_boot" ]; then
            val="disk"
        fi
        if [ "$key" == "dev_enable_udc" ]; then
            val=0
        fi
        if [ "$key" == "alt_os_enabled" ]; then
            val=0
        fi
        if [ "$key" == "recoverysw_boot" ]; then
            val=0
        fi
        if [ "$key" == "recoverysw_cur" ]; then
            val=0
        fi
        echo "$key=$(escape "$val")"
    done
}

disable_autoupdates() {
    mv $ROOT/usr/bin/update_engine_client $ROOT/usr/bin/update_engine_client.old
    mv $ROOT/usr/sbin/update_engine $ROOT/usr/sbin/update_engine.old
}

disable_verity() {
    sleep 2
    echo "ROOTFS VERIFICATION IS ON! IT WILL NOW BE REMOVED"
    /usr/share/vboot/bin/make_dev_ssd.sh --remove_rootfs_verification --partitions 2 -i $DST 2>/dev/null
    /usr/share/vboot/bin/make_dev_ssd.sh --remove_rootfs_verification --partitions 4 -i $DST 2>/dev/null
    cat <<-EOF
ROOTFS VERIFICATION SUCCESSFULLY REMOVED
IN ORDER TO PROCCEED, THE CHROMEBOOK MUST BE REBOOTED

PRESS ENTER TO REBOOT, THEN ONCE BOOTED RUN THIS SCRIPT AGAIN
EOF
    swallow_stdin
    read
    reboot
}

enable_autoenrollment() {
    cvpd -i RW_VPD -s check_enrollment=1 2>/dev/null
    cvpd -i RW_VPD -s block_devmode=0 2>/dev/null
    csys block_devmode=0 2 &>/dev/null
}

cleanup() {
    if [ "$COMPAT" -eq "1" ]; then
        echo "pressure washing... say yes to the overwrite prompt"
        mkfs.ext4 ${DST}p1 # hope you didn't have anything valuable on there
    else
        rm -f /mnt/stateful_partition/.developer_mode
        # this prevents an annoying bootloop
        echo "fast safe" >/mnt/stateful_partition/factory_install_reset
    fi
}

fakemurk() {
    touch $ROOT/sbin/init 2>/dev/null || disable_verity
    echo "disabling autoupdates"
    disable_autoupdates
    sleep 1
    echo "dropping crossystem.sh"
    mv $ROOT/usr/bin/crossystem $ROOT/usr/bin/crossystem.old
    drop_crossystem_sh

}

main() {
    traps
    fakemurk_info

    DST=/dev/mmcblk0 #todo: implement autodetection for weird chromeboooks.

    if csys mainfw_type?recovery; then
        echo "Entering shim compatability mode"
        COMPAT=1

        sleep 3
        mkdir /mnta
        mount ${DST}p3 /mnta
        mkdir /mntb
        mount ${DST}p5 /mntb

        ROOT=/mnta
        fakemurk
        echo "murking alternative root"
        sleep 3
        ROOT=/mntb
        fakemurk

        umount /mnta
        umount /mntb
    else
        fakemurk
    fi

    echo "cleaning up"
    cleanup
    enable_autoenrollment
    echo "done! press enter to reboot, and your chromebook should enroll into management when rebooted, but stay hidden in devmode"
    swallow_stdin
    read
    reboot
    trap - EXIT
    exit

}

if [ "$0" = "$BASH_SOURCE" ]; then
    # if [ "$SHELL" != "/bin/bash" ]; then
    #     echo "hey! you ran this with \"sh\" (or some other shell). i would really prefer if you ran it with \"bash\" instead"
    # fi

    if [ "$EUID" -ne 0 ]; then
        echo "Please run as root"
        exit
    fi
    main
fi
